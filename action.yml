---
name: 'SK Setup'

description: |
  Performs the deployment steps common to all SK microservices within GIVE.

inputs:
  require-redis:
    description: 'Boolean indicating whether to ensure sk-redis is available before deployment.'
    required: false
    default: false

  require-postgres:
    description: 'Boolean indicating whether to ensure sk-postgres is available before deployment.'
    required: false
    default: false

  require-elasticsearch:
    description: 'Boolean indicating whether to ensure sk-elasticsearch is available before deployment.'
    required: false
    default: false

  s3-url:
    description: 'The S3 URL for the SK app files'
    required: true

  app-directory:
    description: 'The directory containing the files relevant to the microservice being deployed.'
    required: true

  sk-secrets:
    description: 'The SK secrets used during the vars file generation.'
    required: true

  standard-deployment:
    description: 'Perform a standard "cf push --vars-file vars.yaml --strategy rolling"'
    required: false
    default: false

  target-environment:
    description: 'String indicating the targeted space (dev/test/prod).'
    required: false
    default: dev

runs:
  using: "composite"
  steps:
    - name: Ensure Redis Available
      shell: bash
      run: |
        redis_instance_size="redis-dev"

        if [[ ${{ inputs.target-environment }} == "prod" ]]; then
          redis_instance_size="redis-3node"
        fi

        if [[ ${{ inputs.require-redis }} == "true" ]]; then
          echo "::group::Ensure Redis Available"
          ${{ github.action_path }}/ensure_service_available.sh -c aws-elasticache-redis "$redis_instance_size" sk-redis
          echo "::endgroup::"
        fi

    - name: Ensure Postgres Available
      shell: bash
      run: |
        if [[ ${{ inputs.require-postgres }} == "true" ]]; then
          echo "::group::Ensure Postgres Available"
          ${{ github.action_path }}/ensure_service_available.sh -c aws-rds medium-psql sk-postgres
          echo "::endgroup::"
        fi

    - name: Ensure Elasticsearch Available
      shell: bash
      run: |
        elasticsearch_instance_size="es-dev"

        if [[ ${{ inputs.target-environment }} == "prod" ]]; then
          elasticsearch_instance_size="es-medium"
        fi

        if [[ ${{ inputs.require-elasticsearch }} == "true" ]]; then
          echo "::group::Ensure Elasticsearch Available"
          ${{ github.action_path }}/ensure_service_available.sh -c aws-elasticsearch "$elasticsearch_instance_size" sk-elasticsearch
          echo "::endgroup::"
        fi

    - name: Download app file with AWS CLI
      shell: bash
      run: |
        app_version=$(cat ${{ inputs.app-directory }}/version)
        full_s3_url="${{ inputs.s3-url }}/$app_version"
        aws s3 sync --only-show-errors "$full_s3_url" ${{ inputs.app-directory }}

    - name: Validate downloaded binary
      shell: bash
      run: |
        cd ${{ inputs.app-directory }}
        sha256sum -c hash
        chmod +x sk-app

    - name: Write SingularKey secrets to CF vars file
      env:
        SK_SECRETS: ${{ inputs.sk-secrets }}
      shell: bash
      run: |
        # Ensure the secret is valid JSON
        echo "$SK_SECRETS" | jq empty
        {
          echo "---"
          echo "SK_SECRETS: |"
          # sed formats yaml value with proper indentation
          echo "$SK_SECRETS" | sed 's/^/  /'
        } > ${{ inputs.app-directory }}/vars.yaml

    - name: Perform Standard Deployment
      shell: bash
      run: |
        if [[ ${{ inputs.standard-deployment }} == "true" ]]; then
          cd ${{ inputs.app-directory }}
          cf push --vars-file vars.yaml --strategy rolling
        fi
